import React, { useEffect, useState } from 'react';
import vaccineService from '../../service/standardVaccine.service';
import { FaPlus } from 'react-icons/fa';

const VaccinePage = () => {
  const [vaccineOptions, setVaccineOptions] = useState([]); //‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô datalist
  const [formRows, setFormRows] = useState([]); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
  const [showForm, setShowForm] = useState(false); // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ã‡πà‡∏≠‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô
  const [displayRows, setDisplayRows] = useState([]); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á

  const ageOptions = ['1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', '2 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', '4 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', '6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', '9 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', '1 ‡∏õ‡∏µ', '1 ‡∏õ‡∏µ 6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', '2 ‡∏õ‡∏µ', '2 ‡∏õ‡∏µ 6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', '11 ‡∏õ‡∏µ', '12 ‡∏õ‡∏µ'];

  useEffect(() => {
    const fetchVaccines = async () => {
      try {
        const res = await vaccineService.getvaccine();
        const allVaccines = res.data.vaccines;

        const flatRows = allVaccines.flatMap(item => // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ñ‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
          item.vaccines.map(v => ({
            age: `${item.ageRange} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô`, // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á
            ageNum: item.ageRange, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
            vaccine: v.vaccineName
          }))
        ).sort((a, b) => a.ageNum - b.ageNum); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏

        setDisplayRows(flatRows);

        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ vaccine options ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö select box
        const vaccineNames = [...new Set(flatRows.map(v => v.vaccine))];
        setVaccineOptions(vaccineNames);
      } catch (err) {
        console.error('Error fetching vaccines:', err);
      }
    };

    fetchVaccines();
  }, []);

  const handleAddForm = () => {
    setShowForm(true);
    setFormRows([{ age: '', vaccine: '' }]); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
  };

  const handleAddRow = () => {
    setFormRows([...formRows, { age: '', vaccine: '' }]);
  };

  const handleChange = (index, field, value) => {
    const updatedRows = [...formRows];
    updatedRows[index][field] = value;
    setFormRows(updatedRows);
  };

  const mapAgeTextToNumber = (ageText) => { // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)
    const map = {
      '1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô': 1,
      '2 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô': 2,
      '4 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô': 4,
      '6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô': 6,
      '9 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô': 9,
      '1 ‡∏õ‡∏µ': 12,
      '1 ‡∏õ‡∏µ 6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô': 18,
      '2 ‡∏õ‡∏µ': 24,
      '2 ‡∏õ‡∏µ 6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô': 30,
      '11 ‡∏õ‡∏µ': 132,
      '12 ‡∏õ‡∏µ': 144,
    };
    return map[ageText] || 0;
  };

  const handleSave = async () => {
    try {
      const grouped = {};

      formRows.forEach((row) => {
        const age = mapAgeTextToNumber(row.age);
        if (!grouped[age]) grouped[age] = [];

        grouped[age].push({
          vaccineName: row.vaccine,
          note: ""
        });
      });

      for (const age in grouped) {
        const payload = {
          ageRange: parseInt(age),
          vaccines: grouped[age]
        };

        await vaccineService.addvaccine(payload);
      }

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô vaccineOptions
      const newVaccineNames = formRows.map(r => r.vaccine).filter(v => !vaccineOptions.includes(v));
      if (newVaccineNames.length > 0) {
        setVaccineOptions(prev => [...new Set([...prev, ...newVaccineNames])]);
      }

      // Clear form
      setFormRows([]);
      setShowForm(false);

      // üîÅ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const res = await vaccineService.getvaccine();
      const allVaccines = res.data.vaccines;

      const flatRows = allVaccines.flatMap(item =>
        item.vaccines.map(v => ({
          age: `${item.ageRange} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô`,
          ageNum: item.ageRange,
          vaccine: v.vaccineName
        }))
      ).sort((a, b) => a.ageNum - b.ageNum);

      setDisplayRows(flatRows);

    } catch (error) {
      console.error('Error saving vaccines:', error);
    }
  };

  return (
    <div className="p-6 max-w-4xl mx-auto bg-white rounded shadow">
      <h2 className="text-xl font-semibold mb-4">‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô</h2>

      <div className="flex gap-2 mb-4">
        <button
          className="bg-green-500 hover:bg-green-600 text-white px-3 py-1 rounded"
          onClick={handleAddForm}
        >
          ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô
        </button>
        <button className="bg-orange-400 hover:bg-orange-500 text-white px-3 py-1 rounded">
          ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô
        </button>
      </div>

      {showForm && (
        <>
          <div className="bg-gray-200 grid grid-cols-3 gap-4 p-2 rounded font-semibold text-sm mb-2">
            <div>‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏</div>
            <div>‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô</div>
            <div></div>
          </div>

          {formRows.map((row, index) => (
            <div key={index} className="grid grid-cols-3 gap-4 items-center mb-2">
              <select
                className="border rounded px-2 py-1"
                value={row.age}
                onChange={(e) => handleChange(index, 'age', e.target.value)}
              >
                <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏¢‡∏∏</option>
                {ageOptions.map((age, i) => (
                  <option key={i} value={age}>{age}</option>
                ))}
              </select>

              <input
                type="text"
                className="border rounded px-2 py-1"
                value={row.vaccine}
                onChange={(e) => handleChange(index, 'vaccine', e.target.value)}
                list="vaccine-list"
              />
              <datalist id="vaccine-list">
                {vaccineOptions.map((v, i) => (
                  <option key={i} value={v} />
                ))}
              </datalist>


              <div className="flex items-center">
                {index === formRows.length - 1 && (
                  <>
                    <button
                      className="bg-black text-white rounded-full p-1 hover:bg-gray-700 mr-2"
                      onClick={handleAddRow}
                    >
                      <FaPlus size={12} />
                    </button>
                    <button
                      className="bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded"
                      onClick={handleSave}
                    >
                      ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                    </button>
                  </>
                )}
              </div>
            </div>
          ))}
        </>
      )}

      {/* ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å */}
      {displayRows.length > 0 && (
        <div className="mt-6">
          <h3 className="text-lg font-semibold mb-2">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h3>
          <table className="w-full border border-gray-300">
            <thead>
              <tr className="bg-gray-100">
                <th className="border p-2">‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏</th>
                <th className="border p-2">‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô</th>
              </tr>
            </thead>
            <tbody>
              {displayRows.map((row, i) => (
                <tr key={i}>
                  <td className="border p-2">{row.age}</td>
                  <td className="border p-2">{row.vaccine}</td>
                </tr>
              ))}
            </tbody>

          </table>
        </div>
      )}

    </div>
  );
};

export default VaccinePage;