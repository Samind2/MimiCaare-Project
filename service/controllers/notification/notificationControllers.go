package notificationControllers

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"time"

	"github.com/Samind2/MimiCaare-Project/service/config/token"
	"github.com/Samind2/MimiCaare-Project/service/config/worker"
	childrenModel "github.com/Samind2/MimiCaare-Project/service/models/children"
	notificationModel "github.com/Samind2/MimiCaare-Project/service/models/notification"
	standardDevelopModel "github.com/Samind2/MimiCaare-Project/service/models/standardDev"
	standardVaccineModel "github.com/Samind2/MimiCaare-Project/service/models/standardVac"
	"github.com/gin-gonic/gin"
	"github.com/go-co-op/gocron"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

var notificationCollection *mongo.Collection
var ChildrenCollection *mongo.Collection
var StandardDevelopCollection *mongo.Collection
var StandardVaccineCollection *mongo.Collection

// SetNotificationCollection ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ notificationCollection
func SetNotificationCollection(client *mongo.Client) {
	dbName := os.Getenv("DBNAME") // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å .env
	notificationCollection = client.Database(dbName).Collection("notifications")
}
func SetChildrenReference(client *mongo.Client) {
	dbName := os.Getenv("DBNAME") // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å .env
	ChildrenCollection = client.Database(dbName).Collection("children")
}
func SetStandardVaccineReference(client *mongo.Client) {
	dbName := os.Getenv("DBNAME") // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å .env
	StandardVaccineCollection = client.Database(dbName).Collection("standardVaccine")
}
func SetStandardDevelopReference(client *mongo.Client) {
	dbName := os.Getenv("DBNAME") // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å .env
	StandardDevelopCollection = client.Database(dbName).Collection("standardDevelops")
}
func fetchChildren() []childrenModel.Children {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	var children []childrenModel.Children

	cursor, err := ChildrenCollection.Find(ctx, map[string]interface{}{})
	if err != nil {
		log.Println("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡πá‡∏Å:", err)
		return children
	}
	defer cursor.Close(ctx)

	for cursor.Next(ctx) {
		var child childrenModel.Children
		if err := cursor.Decode(&child); err == nil {
			children = append(children, child)
		}
	}

	return children
}
func fetchStandardVaccines() []standardVaccineModel.StandardVaccine {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	var standardVaccines []standardVaccineModel.StandardVaccine

	cursor, err := StandardVaccineCollection.Find(ctx, bson.M{})
	if err != nil {
		log.Println("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô:", err)
		return standardVaccines
	}
	defer cursor.Close(ctx)

	for cursor.Next(ctx) {
		var vaccineDoc standardVaccineModel.StandardVaccine
		if err := cursor.Decode(&vaccineDoc); err == nil {
			standardVaccines = append(standardVaccines, vaccineDoc)
		}
	}

	return standardVaccines
}
func fetchStandardDevelopments() []standardDevelopModel.StandardDevelop {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	var standardDevelops []standardDevelopModel.StandardDevelop

	cursor, err := StandardDevelopCollection.Find(ctx, bson.M{})
	if err != nil {
		log.Println("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô:", err)
		return standardDevelops
	}
	defer cursor.Close(ctx)

	for cursor.Next(ctx) {
		var developDoc standardDevelopModel.StandardDevelop
		if err := cursor.Decode(&developDoc); err == nil {
			standardDevelops = append(standardDevelops, developDoc)
		}
	}

	return standardDevelops
}

func StartScheduler() {
	s := gocron.NewScheduler(time.Local)

	// ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 8:00
	s.Every(1).Day().At("08:00").Do(func() {
		log.Println("Start checking notifications...")
		RunNotificationJob7Day()
		RunNotificationJob3Day()
		RunNotificationJobToDay()
	})

	s.StartAsync()
}

func RunNotificationJob7Day() {
	children := fetchChildren()
	jobs := []func(){}
	thaiLoc, _ := time.LoadLocation("Asia/Bangkok") // ‡πÉ‡∏ä‡πâ timezone ‡πÑ‡∏ó‡∏¢

	for _, child := range children {
		childCopy := child
		vaccines := fetchStandardVaccines()
		develops := fetchStandardDevelopments()

		for _, vaccine := range vaccines {
			expectedDate := child.BirthDate.Time().AddDate(0, vaccine.AgeRange, 0)
			daysUntil := int(time.Until(expectedDate).Hours() / 24)

			if daysUntil == 7 {
				filter := bson.M{
					"userId":   childCopy.ParentID,
					"childId":  childCopy.ID,
					"type":     "vaccine",
					"ageRange": vaccine.AgeRange,
				}

				exists, err := notificationCollection.CountDocuments(context.TODO(), filter)
				if err != nil {
					log.Printf("‚ùå Count vaccine error: %v", err)
					continue
				}

				if exists == 0 {
					vaccineCopy := vaccine

					jobs = append(jobs, func() {
						defer func() {
							if r := recover(); r != nil {
								log.Printf("panic in vaccine job: %v", r)
							}
						}()

						log.Printf("üì¢ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô (‡∏≠‡∏≤‡∏¢‡∏∏ %d ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô) ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡∏Ç‡∏≠‡∏á %s", vaccineCopy.AgeRange, childCopy.FirstName)

						_, err := notificationCollection.InsertOne(context.Background(), bson.M{
							"userId":    childCopy.ParentID,
							"childId":   childCopy.ID,
							"type":      "vaccine",
							"ageRange":  vaccineCopy.AgeRange,
							"title":     fmt.Sprintf("‡∏≠‡∏µ‡∏Å 7 ‡∏ß‡∏±‡∏ô ‡∏°‡∏µ‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏±‡∏ö‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏ %d ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", vaccineCopy.AgeRange),
							"childName": fmt.Sprintf("‡∏ô‡πâ‡∏≠‡∏á%s %s", childCopy.FirstName, childCopy.LastName),
							"date":      time.Now().In(thaiLoc),
							"isRead":    false,
						})
						if err != nil {
							log.Printf("‚ùå Insert vaccine notification error: %v", err)
						}
					})
				}
			}
		}

		for _, dev := range develops {
			expectedDate := child.BirthDate.Time().AddDate(0, dev.AgeRange, 0)
			daysUntil := int(time.Until(expectedDate).Hours() / 24)

			if daysUntil == 7 {
				filter := bson.M{
					"userId":   childCopy.ParentID,
					"childId":  childCopy.ID,
					"type":     "development",
					"ageRange": dev.AgeRange,
				}

				exists, err := notificationCollection.CountDocuments(context.TODO(), filter)
				if err != nil {
					log.Printf("‚ùå Count development error: %v", err)
					continue
				}

				if exists == 0 {
					devCopy := dev

					jobs = append(jobs, func() {
						defer func() {
							if r := recover(); r != nil {
								log.Printf("panic in development job: %v", r)
							}
						}()

						log.Printf("üì¢ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏Å‡∏≤‡∏£ (‡∏≠‡∏≤‡∏¢‡∏∏ %d ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô) ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡∏Ç‡∏≠‡∏á %s", devCopy.AgeRange, childCopy.FirstName)

						_, err := notificationCollection.InsertOne(context.Background(), bson.M{
							"userId":    childCopy.ParentID,
							"childId":   childCopy.ID,
							"type":      "development",
							"ageRange":  devCopy.AgeRange,
							"title":     fmt.Sprintf("‡∏≠‡∏µ‡∏Å 7 ‡∏ß‡∏±‡∏ô ‡∏°‡∏µ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏ %d ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", devCopy.AgeRange),
							"childName": fmt.Sprintf("‡∏ô‡πâ‡∏≠‡∏á%s %s", childCopy.FirstName, childCopy.LastName),
							"date":      time.Now().In(thaiLoc),
							"isRead":    false,
						})
						if err != nil {
							log.Printf("‚ùå Insert development notification error: %v", err)
						}
					})
				}
			}
		}
	}

	if len(jobs) == 0 {
		log.Println(" ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏î‡πá‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 7 ‡∏ß‡∏±‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤")
		return
	}

	log.Printf(" ‡∏û‡∏ö %d ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£...", len(jobs))
	worker.RunWorkerPool(jobs)
	log.Println("‚úÖ ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
}

func RunNotificationJob3Day() {
	children := fetchChildren()
	jobs := []func(){}
	thaiLoc, _ := time.LoadLocation("Asia/Bangkok") // ‡πÉ‡∏ä‡πâ timezone ‡πÑ‡∏ó‡∏¢

	for _, child := range children {
		childCopy := child
		vaccines := fetchStandardVaccines()
		develops := fetchStandardDevelopments()

		for _, vaccine := range vaccines {
			expectedDate := child.BirthDate.Time().AddDate(0, vaccine.AgeRange, 0)
			daysUntil := int(time.Until(expectedDate).Hours() / 24)

			if daysUntil == 3 {
				filter := bson.M{
					"userId":   childCopy.ParentID,
					"childId":  childCopy.ID,
					"type":     "vaccine",
					"ageRange": vaccine.AgeRange,
				}

				exists, err := notificationCollection.CountDocuments(context.TODO(), filter)
				if err != nil {
					log.Printf(" Count vaccine error: %v", err)
					continue
				}

				if exists == 0 {
					vaccineCopy := vaccine

					jobs = append(jobs, func() {
						defer func() {
							if r := recover(); r != nil {
								log.Printf("panic in vaccine job: %v", r)
							}
						}()

						log.Printf(" ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô (‡∏≠‡∏≤‡∏¢‡∏∏ %d ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô) ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡∏Ç‡∏≠‡∏á %s", vaccineCopy.AgeRange, childCopy.FirstName)

						_, err := notificationCollection.InsertOne(context.Background(), bson.M{
							"userId":    childCopy.ParentID,
							"childId":   childCopy.ID,
							"type":      "vaccine",
							"ageRange":  vaccineCopy.AgeRange,
							"title":     fmt.Sprintf("‡∏≠‡∏µ‡∏Å 3 ‡∏ß‡∏±‡∏ô ‡∏°‡∏µ‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏±‡∏ö‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏ %d ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", vaccineCopy.AgeRange),
							"childName": fmt.Sprintf("‡∏ô‡πâ‡∏≠‡∏á%s %s", childCopy.FirstName, childCopy.LastName),
							"date":      time.Now().In(thaiLoc),
							"isRead":    false,
						})
						if err != nil {
							log.Printf(" Insert vaccine notification error: %v", err)
						}
					})
				}
			}
		}

		for _, dev := range develops {
			expectedDate := child.BirthDate.Time().AddDate(0, dev.AgeRange, 0)
			daysUntil := int(time.Until(expectedDate).Hours() / 24)

			if daysUntil == 3 {
				filter := bson.M{
					"userId":   childCopy.ParentID,
					"childId":  childCopy.ID,
					"type":     "development",
					"ageRange": dev.AgeRange,
				}

				exists, err := notificationCollection.CountDocuments(context.TODO(), filter)
				if err != nil {
					log.Printf(" Count development error: %v", err)
					continue
				}

				if exists == 0 {
					devCopy := dev

					jobs = append(jobs, func() {
						defer func() {
							if r := recover(); r != nil {
								log.Printf("panic in development job: %v", r)
							}
						}()

						log.Printf(" ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏Å‡∏≤‡∏£ (‡∏≠‡∏≤‡∏¢‡∏∏ %d ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô) ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡∏Ç‡∏≠‡∏á %s", devCopy.AgeRange, childCopy.FirstName)

						_, err := notificationCollection.InsertOne(context.Background(), bson.M{
							"userId":    childCopy.ParentID,
							"childId":   childCopy.ID,
							"type":      "development",
							"ageRange":  devCopy.AgeRange,
							"title":     fmt.Sprintf("‡∏≠‡∏µ‡∏Å 3 ‡∏ß‡∏±‡∏ô ‡∏°‡∏µ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏ %d ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", devCopy.AgeRange),
							"childName": fmt.Sprintf("‡∏ô‡πâ‡∏≠‡∏á%s %s", childCopy.FirstName, childCopy.LastName),
							"date":      time.Now().In(thaiLoc),
							"isRead":    false,
						})
						if err != nil {
							log.Printf(" Insert development notification error: %v", err)
						}
					})
				}
			}
		}
	}

	if len(jobs) == 0 {
		log.Println("üì≠ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏î‡πá‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 3 ‡∏ß‡∏±‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤")
		return
	}

	log.Printf(" ‡∏û‡∏ö %d ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£...", len(jobs))
	worker.RunWorkerPool(jobs)
	log.Println("‚úÖ ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
}

func RunNotificationJobToDay() {
	children := fetchChildren()
	jobs := []func(){}
	thaiLoc, _ := time.LoadLocation("Asia/Bangkok") // ‡πÉ‡∏ä‡πâ timezone ‡πÑ‡∏ó‡∏¢

	for _, child := range children {
		childCopy := child
		vaccines := fetchStandardVaccines()
		develops := fetchStandardDevelopments()

		for _, vaccine := range vaccines {
			expectedDate := child.BirthDate.Time().AddDate(0, vaccine.AgeRange, 0)
			daysUntil := int(time.Until(expectedDate).Hours() / 24)

			if daysUntil == 0 {
				filter := bson.M{
					"userId":   childCopy.ParentID,
					"childId":  childCopy.ID,
					"type":     "vaccine",
					"ageRange": vaccine.AgeRange,
				}

				exists, err := notificationCollection.CountDocuments(context.TODO(), filter)
				if err != nil {
					log.Printf(" Count vaccine error: %v", err)
					continue
				}

				if exists == 0 {
					vaccineCopy := vaccine

					jobs = append(jobs, func() {
						defer func() {
							if r := recover(); r != nil {
								log.Printf("panic in vaccine job: %v", r)
							}
						}()

						log.Printf(" ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô (‡∏≠‡∏≤‡∏¢‡∏∏ %d ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô) ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡∏Ç‡∏≠‡∏á %s", vaccineCopy.AgeRange, childCopy.FirstName)

						_, err := notificationCollection.InsertOne(context.Background(), bson.M{
							"userId":    childCopy.ParentID,
							"childId":   childCopy.ID,
							"type":      "vaccine",
							"ageRange":  vaccineCopy.AgeRange,
							"title":     fmt.Sprintf("‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏±‡∏ö‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏ %d ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", vaccineCopy.AgeRange),
							"childName": fmt.Sprintf("‡∏ô‡πâ‡∏≠‡∏á%s %s", childCopy.FirstName, childCopy.LastName),
							"date":      time.Now().In(thaiLoc),
							"isRead":    false,
						})
						if err != nil {
							log.Printf(" Insert vaccine notification error: %v", err)
						}
					})
				}
			}
		}

		for _, dev := range develops {
			expectedDate := child.BirthDate.Time().AddDate(0, dev.AgeRange, 0)
			daysUntil := int(time.Until(expectedDate).Hours() / 24)

			if daysUntil == 0 {
				filter := bson.M{
					"userId":   childCopy.ParentID,
					"childId":  childCopy.ID,
					"type":     "development",
					"ageRange": dev.AgeRange,
				}

				exists, err := notificationCollection.CountDocuments(context.TODO(), filter)
				if err != nil {
					log.Printf(" Count development error: %v", err)
					continue
				}

				if exists == 0 {
					devCopy := dev

					jobs = append(jobs, func() {
						defer func() {
							if r := recover(); r != nil {
								log.Printf("panic in development job: %v", r)
							}
						}()

						log.Printf(" ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏Å‡∏≤‡∏£ (‡∏≠‡∏≤‡∏¢‡∏∏ %d ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô) ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡∏Ç‡∏≠‡∏á %s", devCopy.AgeRange, childCopy.FirstName)

						_, err := notificationCollection.InsertOne(context.Background(), bson.M{
							"userId":    childCopy.ParentID,
							"childId":   childCopy.ID,
							"type":      "development",
							"ageRange":  devCopy.AgeRange,
							"title":     fmt.Sprintf("‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏ %d ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", devCopy.AgeRange),
							"childName": fmt.Sprintf("‡∏ô‡πâ‡∏≠‡∏á%s %s", childCopy.FirstName, childCopy.LastName),
							"date":      time.Now().In(thaiLoc),
							"isRead":    false,
						})
						if err != nil {
							log.Printf("‚ùå Insert development notification error: %v", err)
						}
					})
				}
			}
		}
	}

	if len(jobs) == 0 {
		log.Println(" ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏î‡πá‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")
		return
	}

	log.Printf("üöÄ ‡∏û‡∏ö %d ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£...", len(jobs))
	worker.RunWorkerPool(jobs)
	log.Println("‚úÖ ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
}

// @Summary ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏° ID
// @Description ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà (‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ)
// @Tags Notification
// @Produce json
// @Success 200 {object} map[string]interface{}
// @Failure 401 {object} map[string]interface{}
// @Failure 403 {object} map[string]interface{}
// @Failure 404 {object} map[string]interface{}
// @Router /notification/get [get]
func GetNotifyByUserID(c *gin.Context) {
	// ‡∏î‡∏∂‡∏á userId ‡∏à‡∏≤‡∏Å cookies
	jwtCookie, err := c.Cookie("jwt")
	if err != nil {
		c.JSON(http.StatusForbidden, gin.H{"message": "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ"})
		return
	}

	userClaims, err := token.ValidateToken(jwtCookie)
	if err != nil {
		c.JSON(http.StatusForbidden, gin.H{"message": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô"})
		return
	}

	userId := userClaims.UserId

	objectID, err := primitive.ObjectIDFromHex(userId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"message": "ID ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"})
		return
	}
	var notifications []notificationModel.Notification
	focus, err := notificationCollection.Find(context.TODO(), notificationModel.Notification{UserId: objectID})
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"message": "‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ"})
		return
	}
	defer focus.Close(context.TODO())

	for focus.Next(context.TODO()) {
		var notofication notificationModel.Notification
		if err := focus.Decode(&notofication); err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"message": "‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ"})
			return
		}
		notifications = append(notifications, notofication)
	}
	if len(notifications) == 0 {
		c.JSON(http.StatusNotFound, gin.H{"message": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"})
		return
	}
	c.JSON(http.StatusOK, gin.H{
		"message":       "‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
		"notifications": notifications,
	})
}

// @Summary ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≤‡∏° ID
// @Description ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≤‡∏° ID ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ)
// @Tags Notification
// @Produce json
// @Param id path string true "ObjectID ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"
// @Success 200 {object} map[string]interface{}
// @Failure 400 {object} map[string]interface{}
// @Failure 401 {object} map[string]interface{}
// @Failure 403 {object} map[string]interface{}
// @Failure 404 {object} map[string]interface{}
// @Router /notification/read/{id} [put]
func MarkNotificationAsRead(c *gin.Context) {
	// ‡∏î‡∏∂‡∏á userId ‡∏à‡∏≤‡∏Å cookies
	jwtCookie, err := c.Cookie("jwt")
	if err != nil {
		c.JSON(http.StatusForbidden, gin.H{"message": "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ"})
		return
	}
	// ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JWT
	userClaims, err := token.ValidateToken(jwtCookie)
	if err != nil {
		c.JSON(http.StatusForbidden, gin.H{"message": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô"})
		return
	}
	userId := userClaims.UserId // ‡∏î‡∏∂‡∏á userId ‡∏à‡∏≤‡∏Å claims

	userObjectID, err := primitive.ObjectIDFromHex(userId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"message": "userId ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"})
		return
	}

	notifyId := c.Param("id")
	notifyObjectId, err := primitive.ObjectIDFromHex(notifyId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"message": "ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"})
		return
	}

	var existingNotify notificationModel.Notification
	err = notificationCollection.FindOne(context.TODO(), bson.M{"_id": notifyObjectId, "userId": userObjectID}).Decode(&existingNotify)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"message": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö ID ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏"})
		return
	}
	if existingNotify.IsRead {
		c.JSON(http.StatusOK, gin.H{"message": "‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß"})
		return
	}
	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ userId ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	if existingNotify.UserId.Hex() != userId {
		c.JSON(http.StatusForbidden, gin.H{"message": "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï - ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ"})
		return
	}

	// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô
	update := bson.M{"isRead": true}
	_, err = notificationCollection.UpdateOne(context.TODO(), bson.M{"_id": notifyObjectId}, bson.M{"$set": update})
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"message": "‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ"})
		return
	}
	c.JSON(http.StatusOK, gin.H{
		"message": "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
	})
}

// @Summary ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
// @Description ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà)
// @Tags Notification
// @Produce json
// @Success 200 {object} map[string]interface{}
// @Failure 401 {object} map[string]interface{}
// @Failure 403 {object} map[string]interface{}
// @Router /notification/read-all [put]
func MarkReadAllNotifications(c *gin.Context) {
	// ‡∏î‡∏∂‡∏á userId ‡∏à‡∏≤‡∏Å cookies
	jwtCookie, err := c.Cookie("jwt")
	if err != nil {
		c.JSON(http.StatusForbidden, gin.H{"message": "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ"})
		return
	}
	// ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JWT
	userClaims, err := token.ValidateToken(jwtCookie)
	if err != nil {
		c.JSON(http.StatusForbidden, gin.H{"message": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô"})
		return
	}

	userId := userClaims.UserId // ‡∏î‡∏∂‡∏á userId ‡∏à‡∏≤‡∏Å claims

	userObjectID, err := primitive.ObjectIDFromHex(userId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"message": "userId ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"})
		return
	}
	// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
	_, err = notificationCollection.UpdateMany(context.TODO(), bson.M{"userId": userObjectID}, bson.M{"$set": bson.M{"isRead": true}})
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"message": "‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ"})
		return
	}
	c.JSON(http.StatusOK, gin.H{"message": "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"})
}
